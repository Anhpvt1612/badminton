const cron = require("node-cron");
const Court = require("../models/Court");
const User = require("../models/User");
const Notification = require("../models/Notification");
const Transaction = require("../models/Transaction");

// TH√äM: Helper function t·∫°o doanh thu cho admin
const createAdminRevenueTransaction = async (
  amount,
  type,
  description,
  relatedId
) => {
  try {
    // T√¨m admin account
    const admin = await User.findOne({ role: "admin" });
    if (!admin) {
      console.error("‚ùå Admin account not found");
      return;
    }

    const balanceBefore = admin.walletBalance || 0;
    const balanceAfter = balanceBefore + Math.abs(amount);

    // C·∫≠p nh·∫≠t s·ªë d∆∞ admin
    admin.walletBalance = balanceAfter;
    await admin.save();

    // T·∫°o transaction cho admin
    await new Transaction({
      user: admin._id,
      type: type,
      amount: Math.abs(amount),
      description: description,
      relatedCourt: relatedId,
      balanceBefore: balanceBefore,
      balanceAfter: balanceAfter,
      status: "completed",
    }).save();

    console.log(
      `‚úÖ Admin revenue: +${amount.toLocaleString("vi-VN")}ƒë - ${description}`
    );
  } catch (error) {
    console.error("‚ùå Error creating admin revenue transaction:", error);
  }
};

// Ch·∫°y m·ªói ng√†y l√∫c 00:01
const startDailyFeeCharge = () => {
  cron.schedule(
    "1 0 * * *",
    async () => {
      console.log("üîÑ Starting daily posting fee charge...");

      try {
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        // L·∫•y t·∫•t c·∫£ s√¢n ƒëang ƒë∆∞·ª£c ƒëƒÉng
        const postedCourts = await Court.find({
          isPosted: true,
          postingEndDate: { $gte: today },
        }).populate("owner");

        let totalProcessed = 0;
        let totalCharged = 0;
        let totalStopped = 0;
        let totalRevenue = 0;

        console.log(`üìä Found ${postedCourts.length} posted courts to process`);

        for (const court of postedCourts) {
          try {
            // Ki·ªÉm tra xem h√¥m nay ƒë√£ tr·ª´ ph√≠ ch∆∞a
            const lastChargedDate =
              court.lastFeeChargedDate || court.postingStartDate;
            const lastChargedDay = new Date(lastChargedDate);
            lastChargedDay.setHours(0, 0, 0, 0);

            // N·∫øu ƒë√£ tr·ª´ ph√≠ h√¥m nay th√¨ b·ªè qua
            if (lastChargedDay.getTime() === today.getTime()) {
              console.log(`‚è≠Ô∏è Court "${court.name}" already charged today`);
              continue;
            }

            const owner = await User.findById(court.owner);
            if (!owner) {
              console.log(`‚ùå Owner not found for court "${court.name}"`);
              continue;
            }

            // S·ª¨A: S·ª≠ d·ª•ng dailyPostingFee t·ª´ Court model, m·∫∑c ƒë·ªãnh 100k
            const dailyFee = court.dailyPostingFee || 100000;

            console.log(
              `üí∞ Processing court "${
                court.name
              }" - Fee: ${dailyFee.toLocaleString(
                "vi-VN"
              )}ƒë - Owner balance: ${owner.walletBalance.toLocaleString(
                "vi-VN"
              )}ƒë`
            );

            // Ki·ªÉm tra s·ªë d∆∞ v√≠
            if (owner.walletBalance >= dailyFee) {
              // L∆∞u s·ªë d∆∞ tr∆∞·ªõc khi tr·ª´ ti·ªÅn
              const balanceBefore = owner.walletBalance;
              const balanceAfter = balanceBefore - dailyFee;

              // Tr·ª´ ti·ªÅn owner
              owner.walletBalance = balanceAfter;
              await owner.save();

              // T·∫°o transaction cho owner (tr·ª´ ti·ªÅn)
              await new Transaction({
                user: owner._id,
                type: "posting_fee",
                amount: -dailyFee,
                description: `Ph√≠ duy tr√¨ s√¢n n·ªïi b·∫≠t "${
                  court.name
                }" - ${today.toLocaleDateString("vi-VN")}`,
                relatedCourt: court._id,
                balanceBefore: balanceBefore,
                balanceAfter: balanceAfter,
                status: "completed",
              }).save();

              // T·∫°o doanh thu cho admin
              await createAdminRevenueTransaction(
                dailyFee,
                "posting_fee_revenue",
                `Ph√≠ duy tr√¨ s√¢n "${court.name}" - ${today.toLocaleDateString(
                  "vi-VN"
                )}`,
                court._id
              );

              // C·∫≠p nh·∫≠t court
              court.lastFeeChargedDate = today;
              court.totalPostingFee = (court.totalPostingFee || 0) + dailyFee;
              await court.save();

              // T·∫°o th√¥ng b√°o cho owner
              await Notification.create({
                recipient: owner._id,
                type: "court_fee_charged",
                title: "Ph√≠ duy tr√¨ s√¢n h√†ng ng√†y",
                message: `ƒê√£ tr·ª´ ${dailyFee.toLocaleString(
                  "vi-VN"
                )}ƒë ph√≠ duy tr√¨ s√¢n "${
                  court.name
                }" cho ng√†y ${today.toLocaleDateString(
                  "vi-VN"
                )}. S·ªë d∆∞ c√≤n l·∫°i: ${balanceAfter.toLocaleString("vi-VN")}ƒë`,
                relatedId: court._id,
              });

              totalCharged++;
              totalRevenue += dailyFee;
              console.log(
                `‚úÖ Charged ${dailyFee.toLocaleString("vi-VN")}ƒë for court: "${
                  court.name
                }"`
              );
            } else {
              // S·ªë d∆∞ kh√¥ng ƒë·ªß - d·ª´ng ƒëƒÉng s√¢n
              court.isPosted = false;
              court.postingEndDate = today;
              await court.save();

              // Th√¥ng b√°o d·ª´ng ƒëƒÉng
              await Notification.create({
                recipient: owner._id,
                type: "court_posting_stopped",
                title: "D·ª´ng ƒëƒÉng s√¢n do h·∫øt ti·ªÅn",
                message: `S√¢n "${
                  court.name
                }" ƒë√£ d·ª´ng ƒëƒÉng do s·ªë d∆∞ v√≠ kh√¥ng ƒë·ªß tr·∫£ ph√≠ ${dailyFee.toLocaleString(
                  "vi-VN"
                )}ƒë. S·ªë d∆∞ hi·ªán t·∫°i: ${owner.walletBalance.toLocaleString(
                  "vi-VN"
                )}ƒë`,
                relatedId: court._id,
              });

              totalStopped++;
              console.log(
                `‚ùå Stopped posting for court: "${
                  court.name
                }" (insufficient balance: ${owner.walletBalance.toLocaleString(
                  "vi-VN"
                )}ƒë < ${dailyFee.toLocaleString("vi-VN")}ƒë)`
              );
            }

            totalProcessed++;
          } catch (error) {
            console.error(`‚ùå Error processing court ${court._id}:`, error);
          }
        }

        console.log(`‚úÖ Daily fee charge completed:
        üìä Total processed: ${totalProcessed} courts
        üí∞ Successfully charged: ${totalCharged} courts
        üíµ Total revenue collected: ${totalRevenue.toLocaleString("vi-VN")}ƒë
        ‚õî Stopped posting: ${totalStopped} courts
        üïê Completed at: ${new Date().toLocaleString("vi-VN")}
      `);
      } catch (error) {
        console.error("‚ùå Error in daily fee charge:", error);
      }
    },
    {
      timezone: "Asia/Ho_Chi_Minh",
    }
  );

  console.log("üïê Daily fee charge scheduler started (runs at 00:01 daily)");
};

// TH√äM function test (ch·ªâ ƒë·ªÉ test, sau n√†y c√≥ th·ªÉ x√≥a)
const testDailyFeeCharge = async () => {
  console.log("üß™ Testing daily fee charge manually...");

  const today = new Date();
  today.setHours(0, 0, 0, 0);

  const postedCourts = await Court.find({
    isPosted: true,
    postingEndDate: { $gte: today },
  }).populate("owner");

  console.log(`üìä Found ${postedCourts.length} posted courts for testing`);

  for (const court of postedCourts) {
    const owner = await User.findById(court.owner);
    const dailyFee = court.dailyPostingFee || 100000;

    console.log(
      `üîç Court: "${court.name}" - Daily fee: ${dailyFee.toLocaleString(
        "vi-VN"
      )}ƒë - Owner balance: ${owner.walletBalance.toLocaleString("vi-VN")}ƒë`
    );
  }
};

module.exports = { startDailyFeeCharge, testDailyFeeCharge };
